# Matem√°ticas Divertidas

<center>
<img src="../../images/math.png" width="500">
</center>

<br>

En este cap√≠tulo, vamos a explorar c√≥mo podemos utilizar Python para hacer las matem√°ticas m√°s divertidas y accesibles. Con Python, no solo podemos resolver problemas matem√°ticos, sino tambi√©n crear simulaciones, visualizar datos y entender conceptos complejos de una manera m√°s interactiva.

üéØ **Objetivos del cap√≠tulo**

- Aprender los conceptos b√°sicos de Python.
- Familiarizarse con la sintaxis y funcionalidad de Python.
- Resolver problemas pr√°cticos y entretenidos.
- Experimentar con el c√≥digo directamente en el navegador utilizando `Quarto-Pyodide`.


## üå°Ô∏è Conversi√≥n de Temperatura

Un programa para convertir grados Celsius a Fahrenheit. Este ejercicio es ideal para practicar operaciones matem√°ticas b√°sicas y el uso de funciones en Python.

### Contexto

La conversi√≥n de temperatura es una operaci√≥n com√∫n en muchos campos cient√≠ficos, desde la meteorolog√≠a hasta la f√≠sica y la qu√≠mica. Conocer c√≥mo convertir entre diferentes unidades de temperatura es esencial en muchas aplicaciones. En este ejercicio, utilizaremos la f√≥rmula de conversi√≥n para transformar una temperatura dada en grados Celsius a su equivalente en grados Fahrenheit.

### F√≥rmula de Conversi√≥n

La f√≥rmula para convertir grados Celsius a Fahrenheit es:

$$ \text{Fahrenheit} = \left( \text{Celsius} \times \frac{9}{5} \right) + 32 $$

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es escribir una funci√≥n en Python que convierta grados Celsius a Fahrenheit y pruebe la funci√≥n con un ejemplo.
:::

1. **Definir una funci√≥n**: Crearemos una funci√≥n llamada `celsius_a_fahrenheit` que tome un par√°metro: la temperatura en grados Celsius (`celsius`).
2. **Implementar la conversi√≥n**: Usaremos la f√≥rmula de conversi√≥n para calcular la temperatura en grados Fahrenheit.
3. **Probar la funci√≥n**: Probaremos la funci√≥n con un valor de ejemplo y mostraremos el resultado.

### C√≥digo para Conversi√≥n de Temperatura

```{pyodide-python}
def celsius_a_fahrenheit(celsius):
    return (celsius * 9/5) + 32

# Ejemplo de uso
celsius = 25
fahrenheit = celsius_a_fahrenheit(celsius)
print(f"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit")
```

### Explicaci√≥n del C√≥digo

1. **Par√°metro de Entrada**:
    - `celsius`: Un n√∫mero que representa la temperatura en grados Celsius.

2. **F√≥rmula de Conversi√≥n**:
    - La funci√≥n utiliza la f√≥rmula $(celsius \times \frac{9}{5}) + 32$ para convertir la temperatura a grados Fahrenheit y devuelve el resultado.

### Ejemplo de Uso

El c√≥digo de ejemplo muestra c√≥mo usar la funci√≥n `celsius_a_fahrenheit` con un valor de temperatura de ejemplo (25 grados Celsius). Al ejecutar este ejemplo, se imprimir√° `25 grados Celsius son 77.0 grados Fahrenheit`.


### Prueba y Modificaci√≥n

Los estudiantes pueden modificar los valores de `celsius` para probar diferentes temperaturas y explorar c√≥mo funciona la funci√≥n. A continuaci√≥n, se presentan tres ejercicios de ejemplo:

**Ejercicio 1: Convertir 0 Grados Celsius a Fahrenheit**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
celsius = # escribir aqu√≠ el valor de celsius
fahrenheit = celsius_a_fahrenheit(celsius)
print(f"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit")
```

## Soluci√≥n


```{pyodide-python}
celsius = 0
fahrenheit = celsius_a_fahrenheit(celsius)
print(f"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit")
```

:::



**Ejercicio 2: Convertir -10 Grados Celsius a Fahrenheit**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
celsius = # escribir aqu√≠ el valor de celsius
fahrenheit = celsius_a_fahrenheit(celsius)
print(f"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit")
```

## Soluci√≥n


```{pyodide-python}
celsius = -10
fahrenheit = celsius_a_fahrenheit(celsius)
print(f"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit")
```

:::

**Ejercicio 3: Convertir 100 Grados Celsius a Fahrenheit**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
celsius = # escribir aqu√≠ el valor de celsius
fahrenheit = celsius_a_fahrenheit(celsius)
print(f"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit")
```

## Soluci√≥n


```{pyodide-python}
celsius = 100
fahrenheit = celsius_a_fahrenheit(celsius)
print(f"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit")
```

:::


## üèãÔ∏è‚Äç‚ôÇÔ∏è C√°lculo del √çndice de Masa Corporal (IMC)

Un programa para calcular el IMC de una persona. Este ejercicio es √∫til para practicar operaciones matem√°ticas y el uso de funciones en Python.

### Contexto

El √çndice de Masa Corporal (IMC) es una medida de la grasa corporal basada en la altura y el peso de una persona. La f√≥rmula para calcular el IMC es:

$$ \text{IMC} = \frac{\text{peso}}{\text{altura}^2} $$

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es escribir una funci√≥n en Python que calcule el IMC de una persona y pruebe la funci√≥n con un ejemplo.
:::

1. **Definir una funci√≥n**: Crearemos una funci√≥n llamada `calcular_imc` que tome dos par√°metros: el peso (`peso`) y la altura (`altura`).
2. **Implementar el c√°lculo**: Usaremos la f√≥rmula del IMC para calcular el √≠ndice y devolver el resultado.
3. **Probar la funci√≥n**: Probaremos la funci√≥n con valores de ejemplo y mostraremos el resultado.

### C√≥digo para el C√°lculo del IMC

```{pyodide-python}
def calcular_imc(peso, altura):
    return peso / (altura ** 2)

# Ejemplo de uso
peso = 70  # kg
altura = 1.75  # m
imc = calcular_imc(peso, altura)
print(f"Para un peso de {peso} kg y una altura de {altura} m, el IMC es {imc:.2f}")
```

### Explicaci√≥n del C√≥digo

1. **Par√°metros de Entrada**:
    - `peso`: Un n√∫mero que representa el peso de la persona en kilogramos.
    - `altura`: Un n√∫mero que representa la altura de la persona en metros.

2. **F√≥rmula del IMC**:
    - La funci√≥n utiliza la f√≥rmula $\frac{peso}{altura^2}$ para calcular el IMC y devuelve el resultado.

### Ejemplo de Uso

El c√≥digo de ejemplo muestra c√≥mo usar la funci√≥n `calcular_imc` con valores de ejemplo (70 kg de peso y 1.75 m de altura).
Al ejecutar este ejemplo, se imprimir√° `Para un peso de 70 kg y una altura de 1.75 m, el IMC es 22.86`.


### Prueba y Modificaci√≥n

Los estudiantes pueden modificar los valores de `peso` y `altura` para probar diferentes combinaciones y explorar c√≥mo funciona la funci√≥n. A continuaci√≥n, se presentan tres ejercicios de ejemplo:

**Ejercicio 1: Calcular el IMC para un peso de 80 kg y una altura de 1.80 m**


::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
peso = # escribir aqu√≠ el valor de peso
altura = # escribir aqu√≠ el valor de altura
imc = calcular_imc(peso, altura)
print(f"Para un peso de {peso} kg y una altura de {altura} m, el IMC es {imc:.2f}")
```

## Soluci√≥n

```{pyodide-python}
peso = 80  # kg
altura = 1.80  # m
imc = calcular_imc(peso, altura)
print(f"Para un peso de {peso} kg y una altura de {altura} m, el IMC es {imc:.2f}")
```

:::




**Ejercicio 2: Calcular el IMC para un peso de 60 kg y una altura de 1.60 m**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
peso = # escribir aqu√≠ el valor de peso
altura = # escribir aqu√≠ el valor de altura
imc = calcular_imc(peso, altura)
print(f"Para un peso de {peso} kg y una altura de {altura} m, el IMC es {imc:.2f}")
```

## Soluci√≥n

```{pyodide-python}
peso = 60  # kg
altura = 1.60  # m
imc = calcular_imc(peso, altura)
print(f"Para un peso de {peso} kg y una altura de {altura} m, el IMC es {imc:.2f}")
```

:::

**Ejercicio 3: Calcular el IMC para un peso de 90 kg y una altura de 1.70 m**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
peso = # escribir aqu√≠ el valor de peso
altura = # escribir aqu√≠ el valor de altura
imc = calcular_imc(peso, altura)
print(f"Para un peso de {peso} kg y una altura de {altura} m, el IMC es {imc:.2f}")
```

## Soluci√≥n

```{pyodide-python}
peso = 90  # kg
altura = 1.70  # m
imc = calcular_imc(peso, altura)
print(f"Para un peso de {peso} kg y una altura de {altura} m, el IMC es {imc:.2f}")
```

:::


## 2Ô∏è‚É£ Verificaci√≥n de N√∫meros Pares e Impares

Un programa para verificar si un n√∫mero es par o impar. Este ejercicio es √∫til para practicar operaciones matem√°ticas y el uso de funciones en Python.

### Contexto

Un n√∫mero es considerado par si es divisible por 2, y es impar si no lo es. La condici√≥n para verificar esto se puede expresar como:

$$ 
\text{N√∫mero es par} \iff \text{N√∫mero} \% 2 = 0 
$$

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es escribir una funci√≥n en Python que determine si un n√∫mero es par o impar y probar la funci√≥n con ejemplos.
:::

1. **Definir una funci√≥n**: Crearemos una funci√≥n llamada `verificar_paridad` que tome un par√°metro: el n√∫mero (`numero`).
2. **Implementar la verificaci√≥n**: Usaremos el operador m√≥dulo (`%`) para verificar si el n√∫mero es par o impar y mostrar el resultado correspondiente.
3. **Probar la funci√≥n**: Probaremos la funci√≥n con varios n√∫meros y mostraremos los resultados.

### C√≥digo para la Verificaci√≥n de N√∫meros Pares e Impares
```{pyodide-python}
def verificar_paridad(numero):
    if numero % 2 == 0:  # Verifica si el n√∫mero es par
        return "par"
    else:  # Si no es par, entonces es impar
        return "impar"

# Ejemplo de uso
numero = 7
resultado = verificar_paridad(numero)
print(f"{numero} es {resultado}")
```

### Explicaci√≥n del C√≥digo

1. **Par√°metro de Entrada**:
   - `numero`: Un n√∫mero entero que se desea verificar.

2. **Verificaci√≥n de Paridad**:
   - La funci√≥n utiliza el operador m√≥dulo `%` para determinar si el n√∫mero es divisible por 2. Si es par, se imprime un mensaje indicando que el n√∫mero es par; de lo contrario, se imprime que es impar.

### Ejemplo de Uso

El c√≥digo de ejemplo muestra c√≥mo usar la funci√≥n `verificar_paridad` con el n√∫mero 7. Al ejecutar este ejemplo, se imprimir√° `El n√∫mero 7 es impar.`.


### Prueba y Modificaci√≥n

Los estudiantes pueden modificar el valor de `numero` para probar si es par o impar y explorar c√≥mo funciona la funci√≥n. A continuaci√≥n, se presentan tres ejercicios de ejemplo:

**Ejercicio 1: Verificar la paridad de 10**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
resultado = verificar_paridad(numero)
print(f"{numero} es {resultado}")
```

## Soluci√≥n


```{pyodide-python}
numero = 10
resultado = verificar_paridad(numero)
print(f"{numero} es {resultado}")
```

:::



**Ejercicio 2: Verificar la paridad de 15**
::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
resultado = verificar_paridad(numero)
print(f"{numero} es {resultado}")
```

## Soluci√≥n


```{pyodide-python}
numero = 15
resultado = verificar_paridad(numero)
print(f"{numero} es {resultado}")
```

:::

**Ejercicio 3: Verificar la paridad de 22**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
resultado = verificar_paridad(numero)
print(f"{numero} es {resultado}")
```

## Soluci√≥n


```{pyodide-python}
numero = 22
resultado = verificar_paridad(numero)
print(f"{numero} es {resultado}")
```

:::


## üìÖ Verificaci√≥n de A√±o Bisiesto

En este ejercicio, vamos a crear un programa que determine si un a√±o es [bisiesto](https://es.wikipedia.org/wiki/A%C3%B1o_bisiesto). Este ejercicio es excelente para practicar el uso de operadores l√≥gicos y condicionales en Python.

### Contexto

Un a√±o bisiesto es un a√±o que tiene 366 d√≠as en lugar de los 365 d√≠as habituales. Este d√≠a adicional se a√±ade en febrero, que tiene 29 d√≠as en lugar de 28. Las reglas para determinar si un a√±o es bisiesto son las siguientes:

1. Un a√±o es bisiesto si es divisible por 4.
2. Sin embargo, si el a√±o es divisible por 100, no es un a√±o bisiesto a menos que tambi√©n sea divisible por 400.

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es escribir una funci√≥n en Python que determine si un a√±o es bisiesto o no, utilizando las reglas mencionadas anteriormente.
:::

1. **Definir una funci√≥n**: Crearemos una funci√≥n llamada `es_bisiesto` que tome un par√°metro: el a√±o (`anio`) a verificar.
2. **Implementar la l√≥gica**: Usaremos operadores l√≥gicos (`and`, `or`) y estructuras condicionales (`if`, `else`) para determinar si el a√±o es bisiesto.
3. **Probar la funci√≥n**: Probaremos la funci√≥n con diferentes a√±os para asegurarnos de que funcione correctamente.

### C√≥digo para Verificaci√≥n de A√±o Bisiesto

```{pyodide-python}
def es_bisiesto(anio):
    if (anio % 4 == 0 and anio % 100 != 0) or (anio % 400 == 0):
        return "a√±o bisiesto"
    else:
        return "a√±o no bisiesto"

# Ejemplo de uso
anio = 2024
resultado = es_bisiesto(anio)
print(f"{anio} es {resultado}")
```

### Explicaci√≥n del C√≥digo

Este c√≥digo define una funci√≥n llamada `es_bisiesto` que realiza lo siguiente:

1. **Par√°metro de Entrada**:
    - `anio`: Un entero que representa el a√±o a verificar.

2. **L√≥gica para Determinar A√±o Bisiesto**:
    - Utiliza operadores l√≥gicos y condicionales para verificar las reglas de un a√±o bisiesto.
    - **Regla 1**: `(anio % 4 == 0 and anio % 100 != 0)` - Un a√±o es bisiesto si es divisible por 4 y no es divisible por 100.
    - **Regla 2**: `(anio % 400 == 0)` - Un a√±o es bisiesto si es divisible por 400.
    - Si alguna de las reglas es verdadera, la funci√≥n devuelve `True`, indicando que el a√±o es bisiesto. De lo contrario, devuelve `False`.

### Ejemplo de Uso

El c√≥digo de ejemplo muestra c√≥mo usar la funci√≥n `es_bisiesto` para verificar si el a√±o 2024 es bisiesto. Al ejecutar este ejemplo, se imprimir√° `2024 es un a√±o bisiesto`.



### Prueba y Modificaci√≥n

Los estudiantes pueden modificar el valor de `anio` para comprobar si es un a√±o bisiesto y explorar c√≥mo funciona la funci√≥n. A continuaci√≥n, se presentan tres ejercicios de ejemplo:

**Ejercicio 1: Verificar si el a√±o 2025 es bisiesto**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
anio = # escribir aqu√≠ el valor de anio
resultado = es_bisiesto(anio)
print(f"{anio} es {resultado}")
```

## Soluci√≥n

```{pyodide-python}
anio = 2025
resultado = es_bisiesto(anio)
print(f"{anio} es {resultado}")
```

:::



**Ejercicio 2: Verificar si el a√±o 1900 es bisiesto**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
anio = # escribir aqu√≠ el valor de anio
resultado = es_bisiesto(anio)
print(f"{anio} es {resultado}")
```

## Soluci√≥n

```{pyodide-python}
anio = 1900
resultado = es_bisiesto(anio)
print(f"{anio} es {resultado}")
```

:::

**Ejercicio 3: Verificar si el a√±o 2000 es bisiesto**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
anio = # escribir aqu√≠ el valor de anio
resultado = es_bisiesto(anio)
print(f"{anio} es {resultado}")
```

## Soluci√≥n

```{pyodide-python}
anio = 2000
resultado = es_bisiesto(anio)
print(f"{anio} es {resultado}")
```

:::


## üßÆ Calculadora B√°sica

En este ejercicio, vamos a crear una simple calculadora que puede realizar operaciones b√°sicas como suma, resta, multiplicaci√≥n y divisi√≥n. Esta actividad es ideal para que los principiantes practiquen el uso de funciones, operadores aritm√©ticos y estructuras condicionales en Python.

### Contexto

Una calculadora es una herramienta fundamental que permite realizar c√°lculos matem√°ticos b√°sicos y complejos. En este ejercicio, nos centraremos en construir una calculadora que pueda manejar cuatro operaciones b√°sicas: suma (`+`), resta (`-`), multiplicaci√≥n (`*`) y divisi√≥n (`/`). Adem√°s, nos aseguraremos de manejar casos especiales como la divisi√≥n por cero, que no es una operaci√≥n v√°lida en matem√°ticas y debe ser tratada con cuidado en nuestro c√≥digo.

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es escribir una funci√≥n en Python que pueda realizar las operaciones b√°sicas de una calculadora y manejar casos especiales como la divisi√≥n por cero.
:::

1. **Definir una funci√≥n**: Crearemos una funci√≥n llamada `calculadora` que tome tres par√°metros: la operaci√≥n a realizar (`operacion`) y dos n√∫meros (`num1` y `num2`).
2. **Implementar las operaciones**: Usaremos estructuras condicionales (`if`, `elif`, `else`) para definir las operaciones aritm√©ticas b√°sicas.
3. **Manejo de errores**: Incluiremos una verificaci√≥n para la divisi√≥n por cero y devolveremos un mensaje de error apropiado.
4. **Probar la funci√≥n**: Probaremos la funci√≥n con diferentes operaciones y valores para asegurarnos de que funcione correctamente.

### C√≥digo de la Calculadora

```{pyodide-python}
def calculadora(operacion, num1, num2):
    if operacion == '+':
        return f"Resultado: {num1 + num2}"
    elif operacion == '-':
        return f"Resultado: {num1 - num2}"
    elif operacion == '*':
        return f"Resultado: {num1 * num2}"
    elif operacion == '/':
        if num2 != 0:
            return f"Resultado: {num1 / num2}"
        else:
            return "Error: Divisi√≥n por cero"
    else:
        return "Operaci√≥n no v√°lida"

# Ejemplo de uso
operacion = '+'
num1 = 10
num2 = 5
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

### Explicaci√≥n del C√≥digo

Este c√≥digo define una funci√≥n llamada `calculadora` que realiza lo siguiente:

1. **Par√°metros de Entrada**:
    - `operacion`: Un string que indica la operaci√≥n a realizar (`+`, `-`, `*`, `/`).
    - `num1`: El primer n√∫mero para la operaci√≥n.
    - `num2`: El segundo n√∫mero para la operaci√≥n.

2. **Estructura Condicional**:
    - Usa `if`, `elif`, y `else` para verificar qu√© operaci√≥n se debe realizar.
    - Realiza la operaci√≥n correspondiente y devuelve el resultado en un formato de cadena que incluye el texto "Resultado: ".

3. **Manejo de Errores**:
    - Para la operaci√≥n de divisi√≥n (`/`), verifica si `num2` es diferente de cero antes de realizar la divisi√≥n. Si `num2` es cero, devuelve un mensaje de error "Error: Divisi√≥n por cero".
    - Si se proporciona una operaci√≥n no v√°lida, devuelve "Operaci√≥n no v√°lida".

### Ejemplo de Uso

El c√≥digo de ejemplo muestra c√≥mo usar la funci√≥n `calculadora` con una operaci√≥n de suma (`+`), y los n√∫meros `10` y `5`.
Al ejecutar este ejemplo, se imprimir√° `Para la operaci√≥n 10 + 5, el resultado es Resultado: 15`.


### Prueba y Modificaci√≥n

Los estudiantes pueden modificar los valores de `operacion`, `num1`, y `num2` para probar diferentes operaciones y explorar c√≥mo funciona la funci√≥n de calculadora. A continuaci√≥n, se presentan seis ejercicios de ejemplo:



**Ejercicio 1: Suma de 10 + 5**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
operacion = '+'
num1 = # escribir aqu√≠ el valor de num1
num2 = # escribir aqu√≠ el valor de num2
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

## Soluci√≥n

```{pyodide-python}
operacion = '+'
num1 = 10
num2 = 5
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

:::



**Ejercicio 2: Resta de 20 - 10**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
operacion = '-'
num1 = # escribir aqu√≠ el valor de num1
num2 = # escribir aqu√≠ el valor de num2
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

## Soluci√≥n

```{pyodide-python}
operacion = '-'
num1 = 20
num2 = 10
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

:::



**Ejercicio 3: Multiplicaci√≥n de 3 * 4**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
operacion = '*'
num1 = # escribir aqu√≠ el valor de num1
num2 = # escribir aqu√≠ el valor de num2
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

## Soluci√≥n

```{pyodide-python}
operacion = '*'
num1 = 3
num2 = 4
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

:::



**Ejercicio 4: Divisi√≥n de 10 / 2**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
operacion = '/'
num1 = # escribir aqu√≠ el valor de num1
num2 = # escribir aqu√≠ el valor de num2
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

## Soluci√≥n

```{pyodide-python}
operacion = '/'
num1 = 10
num2 = 2
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

:::



**Ejercicio 5: Divisi√≥n de 10 / 0 (Divisi√≥n por cero)**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
operacion = '/'
num1 = # escribir aqu√≠ el valor de num1
num2 = # escribir aqu√≠ el valor de num2
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

## Soluci√≥n

```{pyodide-python}
operacion = '/'
num1 = 10
num2 = 0
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

:::



**Ejercicio 6: Operaci√≥n no v√°lida "+-" con 5 y 7**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
operacion = '+-'
num1 = # escribir aqu√≠ el valor de num1
num2 = # escribir aqu√≠ el valor de num2
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

## Soluci√≥n

```{pyodide-python}
operacion = '+-'
num1 = 5
num2 = 7
resultado = calculadora(operacion, num1, num2)
print(f"Para la operaci√≥n {num1} {operacion} {num2} ... {resultado}")
```

:::




## üî¢ N√∫mero Primo

Un programa para verificar si un n√∫mero es [primo](https://es.wikipedia.org/wiki/N%C3%BAmero_primo). Este ejercicio es √∫til para practicar el uso de bucles, estructuras condicionales y funciones en Python.

### Contexto

Un n√∫mero primo es un n√∫mero mayor que 1 que no tiene divisores positivos adem√°s de 1 y s√≠ mismo. Este ejercicio consiste en determinar si un n√∫mero dado es primo.

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es escribir una funci√≥n en Python que verifique si un n√∫mero es primo y pruebe la funci√≥n con un ejemplo.
:::

1. **Definir una funci√≥n**: Crearemos una funci√≥n llamada `es_primo` que tome un par√°metro: el n√∫mero a verificar (`n`).
2. **Implementar la verificaci√≥n**: Usaremos un bucle para comprobar si el n√∫mero tiene divisores distintos de 1 y s√≠ mismo.
3. **Probar la funci√≥n**: Probaremos la funci√≥n con un valor de ejemplo y mostraremos el resultado.

### C√≥digo para Verificaci√≥n de N√∫mero Primo

```{pyodide-python}
def es_primo(n):
    if n <= 1:
        return "n√∫mero no primo"
    for i in range(2, n):
        if n % i == 0:
            return "n√∫mero no primo"
    return "n√∫mero primo"

# Ejemplo de uso
numero = 29
resultado = es_primo(numero)
print(f"{numero} es {resultado}")
```

### Explicaci√≥n del C√≥digo

Este c√≥digo define una funci√≥n llamada `es_primo` que realiza lo siguiente:

1. **Par√°metro de Entrada**:
    - `n`: Un entero que representa el n√∫mero a verificar.

2. **L√≥gica de Verificaci√≥n**:
    - Si `n` es menor o igual a `1`, la funci√≥n devuelve `False` indicando que no es un n√∫mero primo.
    - Usa un bucle `for` para iterar desde `2` hasta `n-1`. Si `n` es divisible por cualquier n√∫mero en este rango, la funci√≥n devuelve `False` indicando que no es un n√∫mero primo.
    - Si el bucle termina sin encontrar divisores, la funci√≥n devuelve `True` indicando que el n√∫mero es primo.

### Ejemplo de Uso

El c√≥digo de ejemplo muestra c√≥mo usar la funci√≥n `es_primo` con un valor de ejemplo (29). Al ejecutar este ejemplo, se imprimir√° `29 es un n√∫mero primo`.



### Prueba y Modificaci√≥n

Los estudiantes pueden modificar el valor de `numero` para probar si es un n√∫mero primo y explorar c√≥mo funciona la funci√≥n. A continuaci√≥n, se presentan cuatro ejercicios de ejemplo:


**Ejercicio 1: Verificar si 39 es un n√∫mero primo**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
resultado = es_primo(numero)
print(f"{numero} es {resultado}")
```

## Soluci√≥n

```{pyodide-python}
numero = 39
resultado = es_primo(numero)
print(f"{numero} es {resultado}")
```

:::



**Ejercicio 2: Verificar si 15 es un n√∫mero primo**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
resultado = es_primo(numero)
print(f"{numero} es {resultado}")
```

## Soluci√≥n

```{pyodide-python}
numero = 15
resultado = es_primo(numero)
print(f"{numero} es {resultado}")
```

:::



**Ejercicio 3: Verificar si 2 es un n√∫mero primo**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
resultado = es_primo(numero)
print(f"{numero} es {resultado}")
```

## Soluci√≥n

```{pyodide-python}
numero = 2
resultado = es_primo(numero)
print(f"{numero} es {resultado}")
```

:::



**Ejercicio 4: Verificar si 17 es un n√∫mero primo**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
resultado = es_primo(numero)
print(f"{numero} es {resultado}")
```

## Soluci√≥n

```{pyodide-python}
numero = 17
resultado = es_primo(numero)
print(f"{numero} es {resultado}")
```

:::



## üìú Conjetura de Collatz

En este ejercicio, vamos a crear un programa que implemente la [Conjetura de Collatz](https://es.wikipedia.org/wiki/Conjetura_de_Collatz), tambi√©n conocida como la conjetura 3n + 1. Este ejercicio es excelente para practicar el uso de bucles, listas y estructuras condicionales en Python.

### Contexto

La Conjetura de Collatz es un problema matem√°tico no resuelto que involucra una secuencia de n√∫meros. Comienza con cualquier n√∫mero positivo entero `n` y aplica las siguientes reglas repetidamente:

1. Si `n` es par, se divide por 2.
2. Si `n` es impar, se multiplica por 3 y se le suma 1.

La conjetura afirma que, no importa qu√© valor inicial se elija, la secuencia siempre llegar√° a 1.

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es escribir una funci√≥n en Python que implemente la Conjetura de Collatz y genere la secuencia de n√∫meros hasta llegar a 1.
:::

1. **Definir una funci√≥n**: Crearemos una funci√≥n llamada `conjetura_de_collatz` que tome un par√°metro: el n√∫mero inicial (`n`).
2. **Implementar la l√≥gica**: Usaremos un bucle `while` para generar la secuencia de n√∫meros aplicando las reglas de la conjetura.
3. **Probar la funci√≥n**: Probaremos la funci√≥n con un n√∫mero inicial y mostraremos la secuencia generada.

### C√≥digo para la Conjetura de Collatz

```{pyodide-python}
def conjetura_de_collatz(n):
    resultado = []
    while n != 1:
        resultado.append(n)
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
    resultado.append(n)
    return resultado

# Ejemplo de uso
numero = 6
secuencia = " -> ".join(map(str, conjetura_de_collatz(numero)))
print(f"La secuencia de Collatz para {numero} es: {secuencia}")
```

### Explicaci√≥n del C√≥digo

Este c√≥digo define una funci√≥n llamada `conjetura_de_collatz` que realiza lo siguiente:

1. **Par√°metro de Entrada**:
    - `n`: Un entero positivo que representa el n√∫mero inicial de la secuencia.

2. **Lista de Resultados**:
    - `resultado`: Una lista que almacenar√° la secuencia de n√∫meros generada por la conjetura.

3. **L√≥gica del Bucle**:
    - Usa un bucle `while` que contin√∫a hasta que `n` sea igual a 1.
    - En cada iteraci√≥n, a√±ade el valor actual de `n` a la lista `resultado`.
    - Si `n` es par, lo divide por 2 usando `n // 2`.
    - Si `n` es impar, lo multiplica por 3 y le suma 1 usando `3 * n + 1`.

4. **A√±adir el Valor Final**:
    - Despu√©s de salir del bucle, a√±ade el valor final 1 a la lista `resultado`.

5. **Devolver la Secuencia**:
    - La funci√≥n devuelve la lista `resultado` que contiene la secuencia completa de n√∫meros.

### Ejemplo de Uso

El c√≥digo de ejemplo muestra c√≥mo usar la funci√≥n `conjetura_de_collatz` con un n√∫mero inicial de 6. Al ejecutar este ejemplo, se imprimir√° la secuencia generada, mostrando cada n√∫mero en la secuencia hasta llegar a 1.

```
6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
```


### Prueba y Modificaci√≥n

Los estudiantes pueden modificar el valor de `numero` para explorar la secuencia generada por la Conjetura de Collatz y observar c√≥mo funciona la funci√≥n. A continuaci√≥n, se presentan cuatro ejercicios de ejemplo:


**Ejercicio 1: Generar la secuencia de Collatz para el n√∫mero 5**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
secuencia = " -> ".join(map(str, conjetura_de_collatz(numero)))
print(f"La secuencia de Collatz para {numero} es: {secuencia}")
```

## Soluci√≥n

```{pyodide-python}
numero = 5
secuencia = " -> ".join(map(str, conjetura_de_collatz(numero)))
print(f"La secuencia de Collatz para {numero} es: {secuencia}")
```

:::



**Ejercicio 2: Generar la secuencia de Collatz para el n√∫mero 7**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
secuencia = " -> ".join(map(str, conjetura_de_collatz(numero)))
print(f"La secuencia de Collatz para {numero} es: {secuencia}")
```

## Soluci√≥n

```{pyodide-python}
numero = 7
secuencia = " -> ".join(map(str, conjetura_de_collatz(numero)))
print(f"La secuencia de Collatz para {numero} es: {secuencia}")
```

:::



**Ejercicio 3: Generar la secuencia de Collatz para el n√∫mero 15**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
secuencia = " -> ".join(map(str, conjetura_de_collatz(numero)))
print(f"La secuencia de Collatz para {numero} es: {secuencia}")
```

## Soluci√≥n

```{pyodide-python}
numero = 15
secuencia = " -> ".join(map(str, conjetura_de_collatz(numero)))
print(f"La secuencia de Collatz para {numero} es: {secuencia}")
```

:::



**Ejercicio 4: Generar la secuencia de Collatz para el n√∫mero 27**

::: {.panel-tabset}

## Ejercicio

```{pyodide-python}
numero = # escribir aqu√≠ el valor de numero
secuencia = " -> ".join(map(str, conjetura_de_collatz(numero)))
print(f"La secuencia de Collatz para {numero} es: {secuencia}")
```

## Soluci√≥n

```{pyodide-python}
numero = 27
secuencia = " -> ".join(map(str, conjetura_de_collatz(numero)))
print(f"La secuencia de Collatz para {numero} es: {secuencia}")
```

:::





## Conclusiones

El uso de Python en la ense√±anza de las matem√°ticas no solo moderniza el aprendizaje, sino que tambi√©n lo vuelve m√°s interactivo y entretenido. A trav√©s de ejercicios pr√°cticos como la conversi√≥n de temperatura, el c√°lculo del IMC y la exploraci√≥n de secuencias matem√°ticas, los estudiantes adquieren habilidades clave para el mundo tecnol√≥gico.

::: {.callout-tip collapse="false" title="Desaf√≠o para Estudiantes:"}
El desaf√≠o para los estudiantes es seguir explorando y practicando con Python para hacer las matem√°ticas m√°s divertidas y comprensibles. ¬°Atr√©vete a resolver problemas, experimentar con nuevas ideas y descubrir c√≥mo la programaci√≥n puede mejorar tu comprensi√≥n de la ciencia y la tecnolog√≠a!
:::


> üîë **Nota**: Para aquellos interesados en continuar su aprendizaje, pueden visitar [este sitio de recursos](https://seth-nut.github.io/resources/) para acceder a material educativo adicional.
